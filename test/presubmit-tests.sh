#!/bin/bash

# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script runs the presubmit tests; it is started by prow for each PR.
# For convenience, it can also be executed manually.
# Running the script without parameters, or with the --all-tests
# flag, causes all tests to be executed, in the right order.
# Use the flags --build-tests, --unit-tests and --integration-tests
# to run a specific set of tests.

source $(dirname $0)/../vendor/github.com/knative/test-infra/scripts/presubmit-tests.sh

# Directories with code to build/test
readonly CODE_PACKAGES=(cmd pkg sample)

# Convert list of packages into list of dirs for go
CODE_PACKAGES_STR="${CODE_PACKAGES[*]}"
CODE_PACKAGES_STR="./${CODE_PACKAGES_STR// /\/... .\/}/..."
readonly CODE_PACKAGES_STR

# Check for subdirs which do not contain any test module but contain code.
# This is to prevent an issue where these directories are skipped in coverage
# reports resulting in inaccurately high coverage results. Fix by adding a
# stub_tests.go with no tests to these directories.
# This function namespaced with eventing to allow adding to test-infra without name collision
function check_eventing_subdirs_without_tests() {
  ret=0
  for code_dir in "$1"; do
    for dir in $(find $code_dir -type d); do
      if echo "$dir" | grep -q "$2"; then
        continue
      fi
      if ls -l $dir/*.go 1> /dev/null 2>&1; then
        if ! ls -l $dir/*_test.go 1> /dev/null 2>&1; then
          echo "Warning: no tests in directory: $dir"
          ret=1
        fi
      fi
    done
  done
  return ${ret}
}

function build_tests() {
  header "Running build tests"
  local result=0
  go build -v ${CODE_PACKAGES_STR} || result=1
  subheader "Checking autogenerated code is up-to-date"
  ./hack/verify-codegen.sh || result=1
  # Check that we don't have any forbidden licenses in our images.
  subheader "Checking for forbidden licenses"
  check_licenses ./cmd/* || result=1
  subheader "Checking for subdirs with no tests"
  check_eventing_subdirs_without_tests "${CODE_PACKAGES[*]}" "pkg/client" || result=1
  return ${result}
}

function unit_tests() {
  header "Running unit tests"
  report_go_test ${CODE_PACKAGES_STR}
}

function integration_tests() {
  ./test/e2e-tests.sh
}

main $@
